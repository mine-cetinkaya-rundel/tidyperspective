---
pagetitle: "Welcoming new learners to data science with the tidyverse"
author: "mine çetinkaya-rundel"
subtitle: "[bit.ly/tidyperspective-dds](https://bit.ly/tidyperspective-dds)"
format:
  revealjs:
    theme: theme-dds.scss
    transition: fade
    background-transition: fade
    height: 900
    width: 1600
    fontcolor: "#262d36"
    highlight-style: ayu-mirage
    multiplex: true
    embed-resources: true
code-link: true
execute:
  echo: true
  freeze: auto
---

#  {#title-slide data-menu-title="Welcoming new learners to data science with the tidyverse" background-image="images/cover-dds.png" aria-label="Stack of legos, in rainbow colors, making up a staircase."}

[welcoming learners]{.custom-title-1}

[to data science]{.custom-title-2}

[with the tidyverse]{.custom-title-3}

[mine çetinkaya-rundel<br>duke university + posit]{.custom-author}

[[bit.ly/tidyperspective-dds](https://bit.ly/tidyperspective-dds)]{.custom-url}

[[\@minebocek](https://twitter.com/minebocek)]{.custom-twitter}

# introduction

```{r}
#| echo: false
library(scales)
library(knitr)
library(kableExtra)

options(dplyr.print_min = 6, dplyr.print_max = 6)
ggplot2::theme_set(ggplot2::theme_gray(base_size = 18))
```

## setting the scene

::: {style="text-align: center;"}
::: columns
::: {.column width="50%"}
::: {.fragment fragment-index="1"}
### about [me]{style="color: #026928;"}
:::

<br>

::: {.fragment fragment-index="2"}
![](images/icons8-female-teacher-64.png){fig-alt="Female teacher icon"}

**Focus:**

Data science for new learners
:::

<br>

::: {.fragment fragment-index="3"}
![](images/icons8-cake-64.png){fig-alt="Cake icon"}

**Philosophy:**

Let them eat cake (first)!
:::
:::

::: {.column width="50%"}
::: {.fragment fragment-index="4"}
### about [data science education]{style="color: #026928;"}
:::

<br>

::: {.fragment fragment-index="5"}
![](images/icons8-code-64.png){fig-alt="Code icon"}

**Assumption 1:**

Teach authentic tools
:::

<br>

::: {.fragment fragment-index="6"}
![](images/icons8-code-R-64.png){fig-alt="Code icon with R logo"}

**Assumption 2:**

Teach R as the authentic tool
:::
:::
:::
:::

## takeaway

<br><br>

> The tidyverse provides an effective and efficient pathway for undergraduate students at all levels and majors to gain computational skills and thinking needed throughout the data science cycle.

::: aside
Çetinkaya-Rundel, M., Hardin, J., Baumer, B., McNamara, A., Horton, N., & Rundel, C.
(2022).
An educator's perspective of the tidyverse.
Technology Innovations in Statistics Education, 14(1).
[dx.doi.org/10.5070/T514154352](http://dx.doi.org/10.5070/T514154352).
:::

## and that pathway starts with...

<br>

::: fragment
::: {style="text-align: center; font-size: 50px;"}
Introduction to Data Science

[sta199-f22-1.github.io](https://sta199-f22-1.github.io/)
:::

![](images/sta-199-topics.png){fig-align="center" fig-alt="List of topics in STA 199: Hello world, Exploring data (visualize, wrangle, import), Data science ethics (misrepresentation, data privacy, algorithmic bias), Making rigorous conclusions (model, predict, infer), Looking further."}
:::

# principles of the tidyverse

## tidyverse

::: columns
::: {.column width="80%"}
meta R package that loads eight core packages when invoked and also bundles numerous other packages that share a design philosophy, common grammar, and data structures

::: {.fragment fragment-index="1"}
```{r}
#| warning: false

library(tidyverse)
```

    ── Attaching packages ────────────────────-─ tidyverse 1.3.2 ──
    ✔ ggplot2 3.4.0      ✔ purrr   0.3.5 
    ✔ tibble  3.1.8      ✔ dplyr   1.0.10
    ✔ tidyr   1.2.1      ✔ stringr 1.4.1 
    ✔ readr   2.1.3      ✔ forcats 0.5.2
:::
:::

::: {.column width="20%"}
![](images/tidyverse.png){fig-align="center" fig-alt="Tidyverse hex icon"}
:::
:::

::: {.fragment fragment-index="2"}
![](images/data-science.png){fig-align="center" width="700" fig-alt="Data science cycle: import, tidy, transform, visualize, model, communicate. Packages readr and tibble are for import. Packages tidyr and purr for tidy and transform. Packages dplyr, stringr, forcats, and lubridate are for transform. Package ggplot2 is for visualize."}
:::

::: aside
Wickham et al., (2019).
Welcome to the Tidyverse.
Journal of Open Source Software, 4(43), 1686, [doi.org/10.21105/joss.01686](https://doi.org/10.21105/joss.01686).
:::

## examples: two "simple" tasks

```{r}
#| include: false

library(openintro)

loans <- loans_full_schema |>
  mutate(
    homeownership = str_to_title(homeownership), 
  ) |>
  filter(annual_income >= 10) |>
  select(
    loan_amount, homeownership, application_type
  )
```

::: columns
::: {.column width="48%"}
::: {.fragment fragment-index="1"}
### grouped summary statistics:

::: goal
Based on the applicants' home ownership status, compute the average loan amount and the number of applicants.
Display the results in descending order of average loan amount.
:::

```{r}
#| echo: false

loans |>
  group_by(homeownership) |> 
  summarize(
    avg_loan_amount = mean(loan_amount),
    n_applicants = n()
    ) |>
  arrange(desc(avg_loan_amount)) |>
  mutate(
    avg_loan_amount = dollar(avg_loan_amount, accuracy = 1),
    n_applicants = number(n_applicants, big.mark = ",")
    ) |>
  kable(
    col.names = c("Homeownership", "Average loan amount", "Number of applicants"),
    align = "lrr"
    )
```
:::
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
::: {.fragment fragment-index="2"}
### multivariable data visualizations:

::: goal
Create side-by-side box plots that show the relationship between loan amount and application type based on homeownership.
:::

```{r}
#| echo: false
#| fig-align: center
#| fig-width: 12

ggplot(loans, 
         aes(x = application_type, y = loan_amount)) +
  geom_boxplot() +
  facet_wrap(~ homeownership) +
  theme_minimal(base_size = 18) +
  scale_y_continuous(labels = label_dollar()) +
  labs(x = "Application type", y = "Loan amount")
```
:::
:::
:::

# teaching with the tidyverse

## task 1 - step 1

::: columns
::: {.column width="40%"}
Based on the applicants' home ownership status, compute the average loan amount and the number of applicants.
Display the results in descending order of average loan amount.
:::

::: {.column width="60%"}
```{r}
loans
```
:::
:::

## task 1 - step 2

::: columns
::: {.column width="40%"}
[Based on the applicants' home ownership status]{style="font-weight:bold;background-color:#ccddeb;"}, compute the average loan amount and the number of applicants.
Display the results in descending order of average loan amount.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "2"

loans |>
  group_by(homeownership)
```
:::
:::

## task 1 - step 3

::: columns
::: {.column width="40%"}
Based on the applicants' home ownership status, [compute the average loan amount]{style="font-weight:bold;background-color:#ccddeb;"} and the number of applicants.
Display the results in descending order of average loan amount.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "3-5"

loans |>
  group_by(homeownership) |> 
  summarize(
    avg_loan_amount = mean(loan_amount)
    )
```
:::
:::

## task 1 - step 4

::: columns
::: {.column width="40%"}
Based on the applicants' home ownership status, compute the average loan amount and [the number of applicants]{style="font-weight:bold;background-color:#ccddeb;"}.
Display the results in descending order of average loan amount.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "5"

loans |>
  group_by(homeownership) |> 
  summarize(
    avg_loan_amount = mean(loan_amount),
    n_applicants = n()
    )
```
:::
:::

## task 1 - step 5

::: columns
::: {.column width="40%"}
Based on the applicants' home ownership status, compute the average loan amount and the number of applicants.
[Display the results in descending order of average loan amount.]{style="font-weight:bold;background-color:#ccddeb;"}
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "7"

loans |>
  group_by(homeownership) |> 
  summarize(
    avg_loan_amount = mean(loan_amount),
    n_applicants = n()
    ) |>
  arrange(desc(avg_loan_amount))
```
:::
:::

## task 1 with the tidyverse

::: columns
::: {.column width="60%"}
::: in-out
**\[input\]** data frame
:::

```{r}
loans |>
  group_by(homeownership) |> 
  summarize(
    avg_loan_amount = mean(loan_amount),
    n_applicants = n()
    ) |>
  arrange(desc(avg_loan_amount))
```

::: in-out
**\[output\]** data frame
:::
:::

::: {.column width="4%"}
:::

::: {.column width="36%"}
::: incremental
-   always start with a data frame and end with a data frame
-   variables are always accessed from within data frames
-   more verbose (than some other approaches), but also more expressive and extensible
:::
:::
:::

## task 1 with `aggregate()`

::: columns
::: {.column width="60%"}
```{r}
#| code-line-numbers: "|1-5|7-11|13|14-15"
ns <- aggregate(
  loan_amount ~ homeownership, 
  data = loans, FUN = length
  )
names(ns)[2] <- "n_applicants"

avgs <- aggregate(
  loan_amount ~ homeownership, 
  data = loans, FUN = mean
  )
names(avgs)[2] <- "avg_loan_amount"

result <- merge(ns, avgs)
result[order(result$avg_loan_amount, 
             decreasing = TRUE), ]
```
:::

::: {.column width="40%"}
:::
:::

## task 1 with `aggregate()`

::: columns
::: {.column width="60%"}
```{r}
ns <- aggregate(
  loan_amount ~ homeownership, 
  data = loans, FUN = length
  )
names(ns)[2] <- "n_applicants"

avgs <- aggregate(
  loan_amount ~ homeownership, 
  data = loans, FUN = mean
  )
names(avgs)[2] <- "avg_loan_amount"

result <- merge(ns, avgs)
result[order(result$avg_loan_amount, 
             decreasing = TRUE), ]
```
:::

::: {.column width="4%"}
:::

::: {.column width="36%"}
**challenges:** need to introduce

::: incremental
-   formula syntax
-   passing functions as arguments
-   merging datasets
-   square bracket notation for accessing rows
:::
:::
:::

## task 1 with `tapply()`

::: columns
::: {.column width="60%"}
```{r}
sort(
  tapply(loans$loan_amount, 
         loans$homeownership, 
         mean),
  decreasing = TRUE
  )
```
:::

::: {.column width="40%"}
:::
:::

## task 1 with `tapply()`

::: columns
::: {.column width="60%"}
```{r}
sort(
  tapply(loans$loan_amount, 
         loans$homeownership, 
         mean),
  decreasing = TRUE
  )
```
:::

::: {.column width="4%"}
:::

::: {.column width="36%"}
**challenges:** need to introduce

::: incremental
-   passing functions as arguments
-   distinguishing between the various `apply()` functions
-   ending up with a new data structure (`array`)
-   reading nested functions
:::
:::
:::

## task 2 - step 1

::: columns
::: {.column width="40%"}
[Create side-by-side box plots that shows the relationship between annual income and application type]{style="font-weight:bold;background-color:#ccddeb;"}, faceted by homeownership.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "1"

ggplot(loans)
```
:::
:::

## task 2 - step 2

::: columns
::: {.column width="40%"}
[Create side-by-side box plots that shows the relationship between annual income and application type]{style="font-weight:bold;background-color:#ccddeb;"}, faceted by homeownership.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "2"

ggplot(loans, 
       aes(x = application_type))
```
:::
:::

## task 2 - step 3

::: columns
::: {.column width="40%"}
[Create side-by-side box plots that shows the relationship between annual income and application type]{style="font-weight:bold;background-color:#ccddeb;"}, faceted by homeownership.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "3"

ggplot(loans, 
       aes(x = application_type,
           y = loan_amount))
```
:::
:::

## task 2 - step 4

::: columns
::: {.column width="40%"}
[Create side-by-side box plots that shows the relationship between annual income and application type]{style="font-weight:bold;background-color:#ccddeb;"}, faceted by homeownership.
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "4"

ggplot(loans, 
       aes(x = application_type,
           y = loan_amount)) +
  geom_boxplot()
```
:::
:::

## task 2 - step 5

::: columns
::: {.column width="40%"}
Create side-by-side box plots that shows the relationship between annual income and application type, [faceted by homeownership.]{style="font-weight:bold;background-color:#ccddeb;"}
:::

::: {.column width="60%"}
```{r}
#| code-line-numbers: "5"

ggplot(loans, 
       aes(x = application_type,
           y = loan_amount)) +
  geom_boxplot() +
  facet_wrap(~ homeownership)
```
:::
:::

## task 2 with `boxplot()`

```{r}
#| code-line-numbers: "1|3-5|7|9-14"
#| output-location: slide
#| fig-width: 12

levels <- sort(unique(loans$homeownership))

loans1 <- loans[loans$homeownership == levels[1],]
loans2 <- loans[loans$homeownership == levels[2],]
loans3 <- loans[loans$homeownership == levels[3],]

par(mfrow = c(1, 3))

boxplot(loan_amount ~ application_type, 
        data = loans1, main = levels[1])
boxplot(loan_amount ~ application_type, 
        data = loans2, main = levels[2])
boxplot(loan_amount ~ application_type, 
        data = loans3, main = levels[3])
```

## we could keep going, but... {.center}

## tools designed for specific tasks vs. general tools

![](images/sets-vs-pieces.png){fig-alt="On one side Lego city sets, on the other size a lego base plate and loose classic Lego pieces."}

##  {data-menu-title="beyond the tidyverse" background-image="images/tidyverse-beyond.png" aria-label="All of the core packages in tidyverse and tidymodels as well as many of the non-core packages."}

# final thoughts

## pedagogical strengths of the tidyverse

| Concept              | Description                                                                                                |
|----------------------|------------------------------------------------------------------------------------------------------------|
| Consistency          | Syntax, function interfaces, argument names, and orders follow patterns                                    |
| Mixability           | Ability to use base R and other functions within the tidyverse                                             |
| Scalability          | Unified approach to data wrangling and visualization works for datasets of a wide range of types and sizes |
| User-centered design | Function interfaces designed and improved with users in mind                                               |
| Readability          | Interfaces that are designed to produce readable code                                                      |
| Community            | Large, active, welcoming community of users and resources                                                  |
| Transfarability      | Data manipulation verbs inherit from SQL's query syntax                                                    |

## keeping up with the tidyverse

-   Blog posts highlight updates, along with the reasoning behind them and worked examples

-   [Lifecycle stages](https://lifecycle.r-lib.org/articles/stages.html) and badges

    ![](images/lifecycle.png){fig-alt="Lifecycle stages of tidyverse functions and packages: experimental, stable, deprecated, superseded."}

## building a curriculum

-   Start with `library(tidyverse)`

-   Teach by learning goals, not packages

## the curriculum we've built \@ duke statsci

::: incremental
-   **STA 199: Introduction to Data Science**

-   courses:

    -   STA 198: Introduction to Global Health Data Science
    -   STA 210: Regression Analysis
    -   STA 323: Statistical Computing
    -   STA 440: Case Studies

-   programs:

    -   Inter-departmental major in Data Science (with CS)
    -   Data Science concentration for the StatSci major

-   and more...
:::

## learn / teach the tidyverse

::: columns
::: {.column width="50%"}
::: {style="text-align: center; font-size: 50px;"}
::: {.column width="50%"}
**learn** the tidyverse

[tidyverse.org](https://tidyverse.org)
:::
:::

![](images/tidyverse.png){fig-align="center" width="400" fig-alt="Tidyverse hex logo"}
:::

::: {.column width="50%"}
::: {style="text-align: center; font-size: 50px;"}
::: {.column width="50%"}
**teach** the tidyverse
:::

[datasciencebox.org](https://datasciencebox.org)
:::

![](images/dsbox-rectangle.png){fig-align="center" width="400" fig-alt="Data science in a box hex logo"}
:::
:::

## further reading

::: columns
::: {.column width="60%"}
`+` collaborators

-   Johanna Hardin, Pomona College
-   Benjamin S. Baumer, Smith College
-   Amelia McNamara, University of St Thomas
-   Nicholas J. Horton, Amherst College
-   Colin W. Rundel, Duke University
:::

::: {.column width="40%"}
[![](images/paper-tise.png){fig-alt="Screenshot of the paper titled \"An educator's perspective of the tidyverse\" from the journal (TISE) website. Shows the title of the paper, the names and affiliations of authors, and part of the abstract." width="500"}](https://doi.org/10.5070/T514154352)
:::
:::

::: aside
Çetinkaya-Rundel, M., Hardin, J., Baumer, B. S., McNamara, A., Horton, N. J., & Rundel, C.
(2022).
An educator's perspective of the tidyverse.
Technology Innovations in Statistics Education, 14(1).
[doi.org/10.5070/T514154352](https://doi.org/10.5070/T514154352).
:::

# thank you! {background-image="images/tidyverse-celestial.png" aria-label="A galaxy of tidyverse-related hex stickers." background-opacity="0.5"}

[bit.ly/tidyperspective-dds](https://bit.ly/tidyperspective-dds)
