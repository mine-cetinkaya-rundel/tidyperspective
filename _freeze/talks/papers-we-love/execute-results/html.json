{
  "hash": "01772397f0c4ad94d3dddb519920c735",
  "result": {
    "markdown": "---\ntitle: \"an educator's perspective of the tidyverse\"\nauthor: \"mine çetinkaya-rundel\"\nsubtitle: \"[bit.ly/tidyperspective-pwl](https://bit.ly/tidyperspective-pwl)\"\nformat:\n  revealjs:\n    theme: theme.scss\n    transition: fade\n    background-transition: fade\n    highlight-style: a11y\ncode-link: true\nexecute:\n  echo: true\n  freeze: auto\n---\n\n\n# introduction\n\n\n::: {.cell}\n\n:::\n\n\n## collaborators\n\n-   Johanna Hardin, Pomona College\n-   Benjamin S. Baumer, Smith College\n-   Amelia McNamara, University of St Thomas\n-   Nicholas J. Horton, Amherst College\n-   Colin W. Rundel, Duke University\n\n## setting the scene\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n![](images/icons8-code-64.png){fig-alt=\"Code icon\"}\n\n**Assumption 1:**\n\nTeach authentic tools\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n![](images/icons8-code-R-64.png){fig-alt=\"R logo\"}\n\n**Assumption 2:**\n\nTeach R as the authentic tool\n:::\n:::\n\n## takeaway\n\n<br><br>\n\n> The tidyverse provides an effective and efficient pathway for undergraduate students at all levels and majors to gain computational skills and thinking needed throughout the data science cycle.\n\n::: aside\nÇetinkaya-Rundel, M., Hardin, J., Baumer, B. S., McNamara, A., Horton, N. J., & Rundel, C.\n(2022).\nAn educator's perspective of the tidyverse.\nTechnology Innovations in Statistics Education, 14(1).\n[doi.org/10.5070/T514154352](https://doi.org/10.5070/T514154352).\n:::\n\n# principles of the tidyverse\n\n## tidyverse\n\n::: columns\n::: {.column width=\"80%\"}\n-   meta R package that loads eight core packages when invoked and also bundles numerous other packages upon installation\n-   tidyverse packages share a design philosophy, common grammar, and data structures\n:::\n\n::: {.column width=\"20%\"}\n![](images/tidyverse.png){fig-alt=\"Hex logo for the tidyverse package\" fig-align=\"center\"}\n:::\n:::\n\n![](images/data-science.png){fig-alt=\"The data science cycle with import (readr and tibble), tidy (tidyr and purr), transfor (dplyr, stringr, forcats, tidyr), visualize (ggplot2), model, communicate\" fig-align=\"center\"}\n\n## setup\n\n**Data:** Thousands of loans made through the Lending Club, a peer-to-peer lending platform available in the **openintro** package, with a few modifications.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(openintro)\n\nloans <- loans_full_schema %>%\n  mutate(\n    homeownership = str_to_title(homeownership), \n    bankruptcy = if_else(public_record_bankrupt >= 1, \"Yes\", \"No\")\n  ) %>%\n  filter(annual_income >= 10) %>%\n  select(\n    loan_amount, homeownership, bankruptcy,\n    application_type, annual_income, interest_rate\n  )\n```\n:::\n\n\n## start with a data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 6\n  loan_amount homeownership bankruptcy application_type annual_income interest…¹\n        <int> <chr>         <chr>      <fct>                    <dbl>      <dbl>\n1       28000 Mortgage      No         individual               90000      14.1 \n2        5000 Rent          Yes        individual               40000      12.6 \n3        2000 Rent          No         individual               40000      17.1 \n4       21600 Rent          No         individual               30000       6.72\n5       23000 Rent          No         joint                    35000      14.1 \n6        5000 Own           No         individual               34000       6.72\n# … with 9,970 more rows, and abbreviated variable name ¹​interest_rate\n```\n:::\n:::\n\n\n## tidy data\n\n1.  Each variable forms a column\n2.  Each observation forms a row\n3.  Each type of observational unit forms a table\n\n::: aside\nWickham, H.\n. (2014).\nTidy Data.\n*Journal of Statistical Software*, *59*(10), 1--23.\n[doi.org/10.18637/jss.v059.i10](https://doi.org/10.18637/jss.v059.i10).\n:::\n\n## task: calculate a summary statistic\n\n::: goal\nCalculate the mean loan amount.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 6\n  loan_amount homeownership bankruptcy application_type annual_income interest…¹\n        <int> <chr>         <chr>      <fct>                    <dbl>      <dbl>\n1       28000 Mortgage      No         individual               90000      14.1 \n2        5000 Rent          Yes        individual               40000      12.6 \n3        2000 Rent          No         individual               40000      17.1 \n4       21600 Rent          No         individual               30000       6.72\n5       23000 Rent          No         joint                    35000      14.1 \n6        5000 Own           No         individual               34000       6.72\n# … with 9,970 more rows, and abbreviated variable name ¹​interest_rate\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(loan_amount)\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in mean(loan_amount): object 'loan_amount' not found\n```\n:::\n:::\n\n\n## accessing a variable\n\n**Approach 1:** With `attach()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattach(loans)\nmean(loan_amount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16357.53\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n*Not recommended.* What if you had another data frame you're working with concurrently called `car_loans` that also had a variable called `loan_amount` in it?\n\n\n::: {.cell}\n\n:::\n\n\n## accessing a variable\n\n**Approach 2:** Using `$`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(loans$loan_amount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16357.53\n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n**Approach 3:** Using `with()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(loans, mean(loan_amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 16357.53\n```\n:::\n:::\n\n\n## accessing a variable\n\n**Approach 4:** The tidyverse approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloans %>%\n  summarise(mean_loan_amount = mean(loan_amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_loan_amount\n             <dbl>\n1           16358.\n```\n:::\n:::\n\n\n. . .\n\n-   More verbose\n-   But also more expressive and extensible\n\n## the tidyverse approach\n\n::: incremental\n-   tidyverse functions take a `data` argument that allows them to localize computations inside the specified data frame\n\n-   does not muddy the concept of what is in the current environment: variables always accessed from within in a data frame without the use of an additional function (like `with()`) or quotation marks, never as a vector\n:::\n\n# teaching with the tidyverse\n\n## task: grouped summary\n\n::: goal\nBased on the applicants' home ownership status, compute the average loan amount and the number of applicants.\nDisplay the results in descending order of average loan amount.\n:::\n\n<br>\n\n::: small\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Homeownership </th>\n   <th style=\"text-align:right;\"> Number of applicants </th>\n   <th style=\"text-align:right;\"> Average loan amount </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Mortgage </td>\n   <td style=\"text-align:right;\"> $18,132 </td>\n   <td style=\"text-align:right;\"> 4,778 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Own </td>\n   <td style=\"text-align:right;\"> $15,665 </td>\n   <td style=\"text-align:right;\"> 1,350 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Rent </td>\n   <td style=\"text-align:right;\"> $14,396 </td>\n   <td style=\"text-align:right;\"> 3,848 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n## break it down I\n\n::: columns\n::: {.column width=\"40%\"}\nBased on the applicants' home ownership status, compute the average loan amount and the number of applicants.\nDisplay the results in descending order of average loan amount.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nloans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 6\n  loan_amount homeownership bankruptcy application_type annual_income interest…¹\n        <int> <chr>         <chr>      <fct>                    <dbl>      <dbl>\n1       28000 Mortgage      No         individual               90000      14.1 \n2        5000 Rent          Yes        individual               40000      12.6 \n3        2000 Rent          No         individual               40000      17.1 \n4       21600 Rent          No         individual               30000       6.72\n5       23000 Rent          No         joint                    35000      14.1 \n6        5000 Own           No         individual               34000       6.72\n# … with 9,970 more rows, and abbreviated variable name ¹​interest_rate\n```\n:::\n:::\n\n:::\n:::\n\n## break it down II\n\n::: columns\n::: {.column width=\"40%\"}\n[Based on the applicants' home ownership status]{style=\"font-weight:bold;background-color:#ccddeb;\"}, compute the average loan amount and the number of applicants.\nDisplay the results in descending order of average loan amount.\n:::\n\n::: {.column width=\"60%\"}\n::: {.fragment fragment-index=\"2\"}\n::: in-out\n**\\[input\\]** data frame\n:::\n:::\n\n::: {.fragment fragment-index=\"3\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nloans %>%\n  group_by(homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 6\n# Groups:   homeownership [3]\n  loan_amount homeownership bankruptcy application_type annual_income interest…¹\n        <int> <chr>         <chr>      <fct>                    <dbl>      <dbl>\n1       28000 Mortgage      No         individual               90000      14.1 \n2        5000 Rent          Yes        individual               40000      12.6 \n3        2000 Rent          No         individual               40000      17.1 \n4       21600 Rent          No         individual               30000       6.72\n5       23000 Rent          No         joint                    35000      14.1 \n6        5000 Own           No         individual               34000       6.72\n# … with 9,970 more rows, and abbreviated variable name ¹​interest_rate\n```\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n::: {.in-out style=\"text-align: right;\"}\ndata frame **\\[output\\]**\n:::\n:::\n:::\n:::\n\n## break it down III\n\n::: columns\n::: {.column width=\"40%\"}\nBased on the applicants' home ownership status, [compute the average loan amount]{style=\"font-weight:bold;background-color:#ccddeb;\"} and the number of applicants.\nDisplay the results in descending order of average loan amount.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3-5\"}\nloans %>%\n  group_by(homeownership) %>% \n  summarize(\n    avg_loan_amount = mean(loan_amount)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  homeownership avg_loan_amount\n  <chr>                   <dbl>\n1 Mortgage               18132.\n2 Own                    15665.\n3 Rent                   14396.\n```\n:::\n:::\n\n:::\n:::\n\n## break it down IV\n\n::: columns\n::: {.column width=\"40%\"}\nBased on the applicants' home ownership status, compute the average loan amount and [the number of applicants]{style=\"font-weight:bold;background-color:#ccddeb;\"}.\nDisplay the results in descending order of average loan amount.\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"5\"}\nloans %>%\n  group_by(homeownership) %>% \n  summarize(\n    avg_loan_amount = mean(loan_amount),\n    n_applicants = n()\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  homeownership avg_loan_amount n_applicants\n  <chr>                   <dbl>        <int>\n1 Mortgage               18132.         4778\n2 Own                    15665.         1350\n3 Rent                   14396.         3848\n```\n:::\n:::\n\n:::\n:::\n\n## break it down V\n\n::: columns\n::: {.column width=\"40%\"}\nBased on the applicants' home ownership status, compute the average loan amount and the number of applicants.\n[Display the results in descending order of average loan amount.]{style=\"font-weight:bold;background-color:#ccddeb;\"}\n:::\n\n::: {.column width=\"60%\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"7\"}\nloans %>%\n  group_by(homeownership) %>% \n  summarize(\n    avg_loan_amount = mean(loan_amount),\n    n_applicants = n()\n    ) %>%\n  arrange(desc(avg_loan_amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  homeownership avg_loan_amount n_applicants\n  <chr>                   <dbl>        <int>\n1 Mortgage               18132.         4778\n2 Own                    15665.         1350\n3 Rent                   14396.         3848\n```\n:::\n:::\n\n:::\n:::\n\n## putting it back together\n\n::: in-out\n**\\[input\\]** data frame\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloans %>%\n  group_by(homeownership) %>% \n  summarize(\n    avg_loan_amount = mean(loan_amount),\n    n_applicants = n()\n    ) %>%\n  arrange(desc(avg_loan_amount))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  homeownership avg_loan_amount n_applicants\n  <chr>                   <dbl>        <int>\n1 Mortgage               18132.         4778\n2 Own                    15665.         1350\n3 Rent                   14396.         3848\n```\n:::\n:::\n\n\n::: in-out\n**\\[output\\]** data frame\n:::\n\n## grouped summary with `aggregate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres1 <- aggregate(loan_amount ~ homeownership, \n                  data = loans, FUN = length)\nres1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  homeownership loan_amount\n1      Mortgage        4778\n2           Own        1350\n3          Rent        3848\n```\n:::\n\n```{.r .cell-code}\nnames(res1)[2] <- \"n_applicants\"\nres1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  homeownership n_applicants\n1      Mortgage         4778\n2           Own         1350\n3          Rent         3848\n```\n:::\n:::\n\n\n## grouped summary with `aggregate()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres2 <- aggregate(loan_amount ~ homeownership, \n                  data = loans, FUN = mean)\nnames(res2)[2] <- \"avg_loan_amount\"\n\nres2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  homeownership avg_loan_amount\n1      Mortgage        18132.45\n2           Own        15665.44\n3          Rent        14396.44\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- merge(res1, res2)\nres[order(res$avg_loan_amount, decreasing = TRUE), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  homeownership n_applicants avg_loan_amount\n1      Mortgage         4778        18132.45\n2           Own         1350        15665.44\n3          Rent         3848        14396.44\n```\n:::\n:::\n\n\n## grouped summary with `aggregate()`\n\n::: small\n\n::: {.cell}\n\n```{.r .cell-code}\nres1 <- aggregate(loan_amount ~ homeownership, data = loans, FUN = length)\nnames(res1)[2] <- \"n_applicants\"\nres2 <- aggregate(loan_amount ~ homeownership, data = loans, FUN = mean)\nnames(res2)[2] <- \"avg_loan_amount\"\nres <- merge(res1, res2)\nres[order(res$avg_loan_amount, decreasing = TRUE), ]\n```\n:::\n\n:::\n\n. . .\n\n-   **Good:** Inputs and outputs are data frames\n-   **Not so good:** Need to introduce\n    -   formula syntax\n\n    -   passing functions as arguments\n\n    -   merging datasets\n\n    -   square bracket notation for accessing rows\n\n## grouped summary with `tapply()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(\n  tapply(loans$loan_amount, loans$homeownership, mean),\n  decreasing = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMortgage      Own     Rent \n18132.45 15665.44 14396.44 \n```\n:::\n:::\n\n\n. . .\n\n<br>\n\n**Not so good:**\n\n-   passing functions as arguments\n-   distinguishing between the various `apply()` functions\n-   ending up with a new data structure (`array`)\n-   reading nested functions\n\n## and...\n\nmany more comparative examples in the paper\n\n## pedagogical strengths of the tidyverse\n\n![](images/table1.png){fig-alt=\"Table 1 from paper: Consistency: Syntax, function interfaces, argument names and orders follow patterns; Mixability: Ability to use base and other functions within tidyverse syntax; Scalability: Unified approach to data wrangling and visualization works for datasets of a wide range of types and sizes; User-centered design: Function interfaces designed with users in mind; Readability: Interfaces that are designed to produce readable code; Community: Large, active, welcoming community of users and resources; Transferability: Data manipulation verbs inherit from SQL’s query syntax.\" fig-align=\"center\"}\n\n## coda {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n> We are all converts to the tidyverse and have made a conscious choice to use it in our research and our teaching.\n> We each learned R without the tidyverse and have all spent quite a few years teaching without it at a variety of levels from undergraduate introductory statistics courses to graduate statistical computing courses.\n> This paper is a synthesis of the reasons supporting our tidyverse choice, along with benefits and challenges associated with teaching statistics with the tidyverse.\n:::\n\n::: {.column width=\"40%\"}\n[![](images/paper-tise.png){fig-alt=\"Screenshot of the paper titled \\\"An educator's perspective of the tidyverse\\\" from the journal (TISE) website. Shows the title of the paper, the names and affiliations of authors, and part of the abstract.\"}](https://doi.org/10.5070/T514154352)\n:::\n:::\n\n::: aside\nÇetinkaya-Rundel, M., Hardin, J., Baumer, B. S., McNamara, A., Horton, N. J., & Rundel, C.\n(2022).\nAn educator's perspective of the tidyverse.\nTechnology Innovations in Statistics Education, 14(1).\n[doi.org/10.5070/T514154352](https://doi.org/10.5070/T514154352).\n:::\n\n# thank you!\n\n[bit.ly/tidyperspective-pwl](https://bit.ly/tidyperspective-pwl)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}